{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Hello","styles","color","this","props","icone","href","link","style","title","React","Component","Link","className","Counter","state","count","trop","increment","bind","decrement","setState","onClick","ROUTE","home","completeTasks","incompleteTasks","TaskApp","curruntRoute","task","id","desc","complete","addTask","window","location","hash","onhashchange","e","filter","tasks","allTasks","preventDefault","prevSate","newTask","length","newTaskDes","value","addTaskForm","reset","onSubmit","ref","input","type","defaultValue","required","placeholder","renderRoute","TaskList","map","key","detail","Task","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b0b1d87.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Hello extends React.Component {\n    render() {\n        const styles = {color: this.props.color};\n        return <h1>{this.props.icone}<a href={this.props.link} style={styles}> {this.props.title}</a></h1>\n\n    }\n}\n\nclass Link extends React.Component {\n    render() {\n        let className = \"link\";\n        return (\n            <div className={className}>\n                <h4>Mes Resaux Sociaux </h4>\n                <Hello title=\"Google\" link=\"https://www.google.fr/ \" color=\"#EA4335\" icone=\"â“‚\"/>\n                <Hello title=\"Twitter\" link=\"https://www.twitter.com \" color=\"#1DA1F2\" icone=\"ðŸ‘¬\"/>\n                <Hello title=\"Instagram\" link=\"https://www.instagram.com/?hl=fr\" color=\"#AA3888\" icone=\"â›¹\"/>\n            </div>\n        );\n    }\n}\n\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {count: 0, trop: ''};\n        this.increment = this.increment.bind(this);\n        this.decrement = this.decrement.bind(this);\n\n    }\n\n    increment() {\n        this.state.count <= 9 && this.setState({count: this.state.count + 1});\n        this.state.count >= 2 && this.setState({trop: \"âœ…\"});\n\n    }\n\n    decrement() {\n        this.state.count > 0 && this.setState({count: this.state.count - 1});\n        this.state.count <= 3 && this.setState({trop: \"ðŸ˜´ \"});\n\n    }\n\n    render() {\n        let className = \"count\";\n        return (\n            <div className={className}>\n                <h1>Vous avez {this.state.count} point. {this.state.trop}</h1>\n                <div className='btn'>\n                    <button onClick={this.increment}>J'ai un nouveau point</button>\n                    <button onClick={this.decrement}>J'ai perdu un point</button>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nconst ROUTE = {\n    home: '#/',\n    completeTasks: '#/c-task',\n    incompleteTasks: '#/i-task',\n\n};\n\nclass TaskApp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curruntRoute: ROUTE.incompleteTasks,\n            task: [\n\n                {\n                    id: 1,\n                    desc: \"Faire du code\",\n                    complete: true\n                },\n                {\n                    id: 2,\n                    desc: \"Go to Pita\",\n                    complete: false\n                },\n                {\n                    id: 3,\n                    desc: \"Suivre OM\",\n                    complete: false\n                }\n\n            ]\n        };\n        this.addTask = this.addTask.bind(this)\n    }\n\n    componentDidMount() {\n        window.location.hash = ROUTE.home;\n        window.onhashchange = (e) => {\n            this.setState({curruntRoute: window.location.hash})\n        }\n    }\n\n\n    allTasks() {\n        return this.state.task;\n    }\n\n    completeTasks() {\n        return this.state.task.filter(task => task.complete);\n    }\n\n    incompleteTasks() {\n        return this.state.task.filter(task => !task.complete);\n    }\n\n    renderRoute() {\n        switch (this.state.curruntRoute) {\n            case ROUTE.home:\n                return <TaskList tasks={this.allTasks()} title=\"Toutes les taches\"/>;\n            case ROUTE.completeTasks:\n                return <TaskList tasks={this.completeTasks()} title=\"Les Taches Completes\"/>;\n            case ROUTE.incompleteTasks:\n                return <TaskList tasks={this.incompleteTasks()} title=\"Les Taches Incompletes\"/>;\n            default:\n                return <h1>404 Page note found</h1>\n        }\n    }\n\n\n    addTask(e) {\n        e.preventDefault();\n        this.setState((prevSate) => {\n            const newTask = {\n                id: prevSate.task.length + 1,\n                desc: this.newTaskDes.value,\n                complete: false\n            };\n            this.addTaskForm.reset();\n            return {\n\n                task: [...prevSate.task, newTask]\n            }\n\n        });\n\n\n    }\n\n    render() {\n        let classMenu = \"menu\";\n        let classForm = \"form\";\n        return (\n            <div className={classMenu}>\n                <ul>\n                    <li><a href={ROUTE.home}>Home</a></li>\n                    <li><a href={ROUTE.completeTasks}>Completes</a></li>\n                    <li><a href={ROUTE.incompleteTasks}>Incompletes</a></li>\n                </ul>\n                <form className={classForm} onSubmit={this.addTask.bind(this)} ref={input => this.addTaskForm = input}>\n                    <input type=\"text\" defaultValue=\"\" ref={input => this.newTaskDes = input} required\n                           placeholder={\"Ajouter votre tÃ¢che\"}/>\n                    <input className={\"val\"} type=\"submit\" value=\"Ajouter\"/>\n                </form>\n                {this.renderRoute()}\n            </div>\n\n\n        )\n    }\n}\n\nconst TaskList = (props) => {\n    let className = \"Task\";\n\n    return (\n        <div className={className}>\n            <h5>{props.title}</h5>\n            {props.tasks.map(task => <Task key={task.id} detail={task}/>)}\n        </div>\n    );\n};\n\nconst Task = (props) => {\n    const placeholder = props.detail.complete\n        ? <strike># {props.detail.id} - {props.detail.desc}-' âœ… ' </strike>\n        : <span>{props.detail.id} - {props.detail.desc}</span>;\n    return <article><h4>{placeholder}</h4></article>\n};\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Counter/>\n                <Link/>\n                <TaskApp/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}